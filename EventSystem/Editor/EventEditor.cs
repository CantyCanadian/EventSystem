using Canty.Event.Internal;
using Newtonsoft.Json;
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using UnityEngine;

namespace Canty.Editor
{
    public class EventEditor : EditorWindow, ISerializationCallbackReceiver
    {
        // You can rename all the namespaces for this system. Canty's my default namespace.
        public const string DEFAULT_NAMESPACE = "Canty.Event";

        private const string GENERATED_COMMENT_MARKER = "//------------------------------------------------------------------------------";
        private const string CUSTOM_COMMENT =
            "//------------------------------------------------------------------------------\n" +
            "//\n" +
            "// AUTO-GENERATED BY EVENTEDITOR\n" +
            "// DO NOT EDIT\n" +
            "//\n" +
            "//------------------------------------------------------------------------------";

        private const float EVENT_TYPE_LIST_BOX_WIDTH = 100.0f;

        private const string CUSTOM_CODE_START =    "//--------------CUSTOM CODE START----------------";
        private const string CUSTOM_CODE_END =      "//--------------CUSTOM CODE END------------------";

        // This is the path where the editor will save extra data that helps it run faster.
        // It should be in a folder called Editor found somewhere logical.
        private static string _scriptPath => Application.dataPath + "/Scripts/Core/Event System/Editor/";

        // This is the path where the editor will save all your events.
        // It can be placed anywhere, but not under a folder called Editor, or else your events will be editor-only.
        private static string _eventPath => Application.dataPath + "/Scripts/Core/Event System/Events/";

        public enum CustomCodeLocation
        {
            InsideClass,
            OutsideClass
        }

        [Serializable]
        public class VariableContainer
        {
            public bool Params;
            public string Type;
            public string Name;
            public string DefaultValue;

            public VariableContainer(bool param, string type, string name, string defaultValue)
            {
                Params = param;
                Type = type;
                Name = name;
                DefaultValue = defaultValue;
            }
        }

        [Serializable]
        public class EventDataContainer
        {
            public string Namespace;
            public List<string> Imports;
            public string ExtraComment;
            public string EventName;
            public string Target;
            public CustomCodeLocation CustomCodeLocation;
            public List<VariableContainer> Variables;
            public bool Log;
            public string LogString;
            public bool CustomCode;

            public EventDataContainer(EventDataContainer other)
            {
                Namespace = other.Namespace;
                Imports = other.Imports;
                ExtraComment = other.ExtraComment;
                EventName = other.EventName;
                Target = other.Target;
                CustomCode = other.CustomCode;
                Variables = other.Variables;
                Log = other.Log;
                LogString = other.LogString;
                CustomCode = other.CustomCode;
            }

            public EventDataContainer(string @namespace, List<string> imports, string extraComment, string eventName, string target, CustomCodeLocation customCodeLocation, List<VariableContainer> variables, bool log, string logString, bool customCode)
            {
                Namespace = @namespace;
                Imports = imports;
                ExtraComment = extraComment;
                EventName = eventName;
                Target = target;
                CustomCodeLocation = customCodeLocation;
                Variables = variables;
                Log = log;
                LogString = logString;
                CustomCode = customCode;
            }

            public EventDataContainer() { }
        }

        [SerializeField] private TreeViewState _eventListBoxState = new TreeViewState();
        private EventListBox _eventListBox;

        private List<string> _availableTargetTypes = new List<string>();
        private EventDataContainer _currentSelection = null;

        private Vector2 _rightScrollViewScroll = Vector2.zero;

        [MenuItem("Data/Event Editor", false, 0)]
        public static void ShowWindow()
        {
            EventEditor window = GetWindow<EventEditor>();
            window.name = "Event Editor";
            window.minSize = new Vector2(300.0f, 300.0f);
            window.maxSize = new Vector2(1920.0f, 1080.0f);
            window.Show();
        }

        public static string GetFinalPath(EventDataContainer container) => $"{_eventPath}{SplitCamelCase(container.Target).Split(" ").First()}/";

        private static string SplitCamelCase(string camelCaseString)
        {
            if (string.IsNullOrEmpty(camelCaseString)) return camelCaseString;

            string camelCase = Regex.Replace(Regex.Replace(camelCaseString, @"(\P{Ll})(\P{Ll}\p{Ll})", "$1 $2"), @"(\p{Ll})(\P{Ll})", "$1 $2");
            string firstLetter = camelCase.Substring(0, 1).ToUpper();

            if (camelCaseString.Length > 1)
            {
                string rest = camelCase.Substring(1);
                return firstLetter + rest;
            }

            return firstLetter;
        }

        private void OnGUI()
        {
            using (new EditorGUILayout.HorizontalScope())
            {
                using (new EditorGUILayout.VerticalScope(GUILayout.Width(EVENT_TYPE_LIST_BOX_WIDTH)))
                {
                    using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
                    {
                        List<string> keys = new List<string>();
                        keys.Add("None");
                        keys.AddRange(_availableTargetTypes);

                        int index = keys.IndexOf(_eventListBox.GetTargetFilter());
                        string result = keys[EditorGUILayout.Popup(index == -1 ? 0 : index, keys.ToArray())];

                        if (_eventListBox.GetTargetFilter() != result && !(result == "None" && _eventListBox.GetTargetFilter() == string.Empty))
                        {
                            _eventListBox.SetTargetFilter(result == "None" ? string.Empty : result);
                            _eventListBox.SetSelection(new List<int>());
                            _eventListBox.Reload();
                        }

                        Rect eventListBoxRect = EditorGUILayout.GetControlRect(GUILayout.ExpandHeight(true));
                        _eventListBox.OnGUI(eventListBoxRect);
                    }

                    using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
                    {
                        if (GUILayout.Button("Generate All"))
                        {
                            List<EventDataContainer> containers = new List<EventDataContainer>(_eventListBox.Data);
                            foreach (EventDataContainer container in containers)
                            {
                                string customCode = DeleteClass(container);
                                SaveClass(container);
                                GenerateClass(container, customCode);
                            }
                        }
                    }
                }

                using (new EditorGUILayout.VerticalScope(GUILayout.ExpandWidth(true)))
                {
                    using (EditorGUILayout.ScrollViewScope rightScroll = new EditorGUILayout.ScrollViewScope(_rightScrollViewScroll, false, false, GUIStyle.none, GUI.skin.verticalScrollbar, EditorStyles.helpBox, GUILayout.ExpandHeight(true), GUILayout.ExpandWidth(true)))
                    {
                        _rightScrollViewScroll = rightScroll.scrollPosition;

                        if (_eventListBox.GetSelectedObject() != null)
                        {
                            _currentSelection.Namespace = EditorGUILayout.TextField("Namespace : ", _currentSelection.Namespace);
                            int count = EditorGUILayout.IntField("Imports : ", _currentSelection.Imports.Count);
                            if (count != _currentSelection.Imports.Count && count >= 0)
                            {
                                for (int i = 0; i < Mathf.Max(count, _currentSelection.Imports.Count); i++)
                                {
                                    if (i >= _currentSelection.Imports.Count)
                                        _currentSelection.Imports.Add("");
                                    else if (i >= count)
                                        _currentSelection.Imports.RemoveAt(i);
                                }
                            }

                            for (int i = 0; i < _currentSelection.Imports.Count; ++i)
                            {
                                using (new EditorGUILayout.HorizontalScope())
                                {
                                    EditorGUILayout.LabelField(i.ToString(), GUILayout.Width(15.0f));
                                    _currentSelection.Imports[i] = EditorGUILayout.TextField("Namespace : ", _currentSelection.Imports[i], GUILayout.Width(300.0f));

                                    if (GUILayout.Button("-", GUILayout.Width(15.0f)))
                                    {
                                        _currentSelection.Imports.RemoveAt(i);
                                        --i;
                                    }
                                }
                            }

                            EditorGUILayout.Separator();

                            _currentSelection.EventName = EditorGUILayout.TextField("Name", _currentSelection.EventName);

                            string[] keys = _availableTargetTypes.ToArray();
                            int index = Array.IndexOf(keys, _currentSelection.Target);
                            _currentSelection.Target = keys[EditorGUILayout.Popup("Target", index == -1 ? 0 : index, keys)];
                            _currentSelection.CustomCode = EditorGUILayout.Toggle("Enable Custom Code?", _currentSelection.CustomCode);
                            if (_currentSelection.CustomCode)
                                _currentSelection.CustomCodeLocation = (CustomCodeLocation)EditorGUILayout.Popup("Custom Code Location", (int)_currentSelection.CustomCodeLocation, Enum.GetNames(typeof(CustomCodeLocation)));
                            _currentSelection.Log = EditorGUILayout.Toggle("Do we send logs?", _currentSelection.Log);
                            if (_currentSelection.Log)
                                _currentSelection.LogString = EditorGUILayout.TextField("Log Message", _currentSelection.LogString);
                            _currentSelection.ExtraComment = EditorGUILayout.TextField("Extra Comment", _currentSelection.ExtraComment);

                            EditorGUILayout.Separator();

                            count = EditorGUILayout.IntField("Variables", _currentSelection.Variables.Count);
                            if (count != _currentSelection.Variables.Count && count >= 0)
                            {
                                for (int i = 0; i < Mathf.Max(count, _currentSelection.Variables.Count); i++)
                                {
                                    if (i >= _currentSelection.Variables.Count)
                                        _currentSelection.Variables.Add(new VariableContainer(false, "", "", ""));
                                    else if (i >= count)
                                        _currentSelection.Variables.RemoveAt(i);
                                }
                            }

                            for (int i = 0; i < _currentSelection.Variables.Count; ++i)
                            {
                                using (new EditorGUILayout.HorizontalScope())
                                {
                                    EditorGUILayout.LabelField(i.ToString(), GUILayout.Width(15.0f));
                                    EditorGUILayout.LabelField("Params", GUILayout.Width(60.0f));
                                    bool param = EditorGUILayout.Toggle(_currentSelection.Variables[i].Params, GUILayout.Width(20.0f));
                                    EditorGUILayout.LabelField("Type", GUILayout.Width(60.0f));
                                    string type = EditorGUILayout.TextField(_currentSelection.Variables[i].Type, GUILayout.Width(100.0f));
                                    EditorGUILayout.LabelField("Name", GUILayout.Width(60.0f));
                                    string name = EditorGUILayout.TextField(_currentSelection.Variables[i].Name, GUILayout.Width(100.0f));
                                    EditorGUILayout.LabelField("Def.Value", GUILayout.Width(60.0f));
                                    string defaultValue = EditorGUILayout.TextField(_currentSelection.Variables[i].DefaultValue, GUILayout.Width(100.0f));

                                    _currentSelection.Variables[i] = new VariableContainer(param, type, name, defaultValue);

                                    if (GUILayout.Button("-", GUILayout.Width(15.0f)))
                                    {
                                        _currentSelection.Variables.RemoveAt(i);
                                        --i;
                                    }
                                }
                            }
                        }
                    }

                    using (new EditorGUILayout.HorizontalScope(EditorStyles.helpBox))
                    {
                        using (new EditorGUI.DisabledScope(_eventListBox.GetSelectedObject() == null || _currentSelection.EventName.IndexOf("NewBehaviourName") != -1))
                        {
                            if (GUILayout.Button("Generate"))
                            {
                                EventDataContainer dataContainer = _eventListBox.GetSelectedObject();
                                string customCode = DeleteClass(dataContainer);
                                SaveClass(dataContainer);
                                GenerateClass(dataContainer, customCode);
                            }
                        }
                    }
                }
            }
        }

        public void OnBeforeSerialize()
        {
            SaveClass(_currentSelection);
        }

        public void OnAfterDeserialize() { }

        private void SaveClass(EventDataContainer container)
        {
            _eventListBox.AddUnique(container);
            _eventListBox.SetSelectedObject(container);
            _eventListBox.Reload();
            File.WriteAllText(_scriptPath + "/EventEditorMetadata.json", JsonConvert.SerializeObject(_eventListBox.Data, Formatting.Indented));
        }

        private string DeleteClass(EventDataContainer container)
        {
            string path = GetFinalPath(container) + $"{container.EventName}.cs";
            if (File.Exists(path))
            {
                string file = File.ReadAllText(path);
                int start = file.IndexOf(CUSTOM_CODE_START);
                string customCode = start != -1 ? file.Substring(start + CUSTOM_CODE_START.Length, file.IndexOf(CUSTOM_CODE_END) - start - CUSTOM_CODE_END.Length) : "";
                File.Delete(path);
                _eventListBox.Data.Remove(container);
                File.WriteAllText(_scriptPath + "/EventEditorMetadata.json", JsonConvert.SerializeObject(_eventListBox.Data, Formatting.Indented));
                return customCode;
            }
            return string.Empty;
        }

        private void GenerateClass(EventDataContainer container, string customCode)
        {
            string directory = GetFinalPath(container);
            string path = directory + $"{container.EventName}.cs";

            CodeCompileUnit targetUnit = new CodeCompileUnit();
            CodeNamespace globalNamespace = new CodeNamespace();

            globalNamespace.Imports.Add(new CodeNamespaceImport("Canty.Event.Internal"));

            List<string> imports = container.Imports.OrderBy(str => str).ToList();
            foreach (string import in imports)
                globalNamespace.Imports.Add(new CodeNamespaceImport(import));

            targetUnit.Namespaces.Add(globalNamespace);
            CodeNamespace @namespace = new CodeNamespace(container.Namespace);

            CodeTypeDeclaration targetClass = new CodeTypeDeclaration(container.EventName);
            targetClass.IsClass = true;
            targetClass.TypeAttributes = TypeAttributes.Public;

            CodeTypeReference baseType = new CodeTypeReference(container.Target, new CodeTypeReference(container.EventName));
            targetClass.BaseTypes.Add(baseType);

            @namespace.Types.Add(targetClass);

            targetUnit.Namespaces.Add(@namespace);

            if (!string.IsNullOrEmpty(container.ExtraComment))
                targetClass.Comments.Add(new CodeCommentStatement(container.ExtraComment));

            // Variable Properties
            foreach (VariableContainer variable in container.Variables)
            {
                CodeMemberField property = new CodeMemberField();
                property.Attributes = MemberAttributes.Public;
                property.Name = variable.Name + " {g,ps}" + (!string.IsNullOrEmpty(variable.DefaultValue) ? $" = {variable.DefaultValue}" : ""); // {g,ps} gets replaced by { get; private set; }, a hack to allow this feature.
                property.Type = new CodeTypeReference(variable.Type);
                targetClass.Members.Add(property);
            }

            // Reset()
            if (container.Variables.Count > 0)
            {
                CodeMemberMethod reset = new CodeMemberMethod();
                reset.Attributes = MemberAttributes.Public | MemberAttributes.Final;
                reset.Name = "Reset";
                reset.ReturnType = new CodeTypeReference(typeof(void));

                foreach (VariableContainer variable in container.Variables)
                {
                    string customVar = $"{variable.Name.Substring(0, 1).ToLowerInvariant()}{variable.Name.Substring(1)}";
                    CodeParameterDeclarationExpression parameter = new CodeParameterDeclarationExpression((variable.Params ? "params " : "") + variable.Type, customVar + $"{(!string.IsNullOrEmpty(variable.DefaultValue) ? " = " + variable.DefaultValue : "")}");
                    reset.Parameters.Add(parameter);
                    reset.Statements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(variable.Name), new CodeVariableReferenceExpression(customVar)));
                }

                targetClass.Members.Add(reset);
            }

            // Copy()
            CodeMemberMethod copy = new CodeMemberMethod();
            copy.Attributes = MemberAttributes.Public | MemberAttributes.Override;
            copy.Name = "Copy";
            copy.ReturnType = new CodeTypeReference(typeof(void));
            copy.Parameters.Add(new CodeParameterDeclarationExpression("EventBase", "eventObject"));

            copy.Statements.Add(new CodeMethodInvokeExpression(new CodeBaseReferenceExpression(), "Copy", new CodeSnippetExpression("eventObject")));

            string subVarName = $"{container.EventName.Substring(0, 1).ToLowerInvariant()}{container.EventName.Replace(" ", "").Substring(1)}";
            CodeConditionStatement ifStatement = new CodeConditionStatement(new CodeSnippetExpression($"eventObject != null && eventObject is {container.EventName} {subVarName}"));

            foreach (VariableContainer variable in container.Variables)
                ifStatement.TrueStatements.Add(new CodeAssignStatement(new CodeVariableReferenceExpression(variable.Name), new CodeFieldReferenceExpression(new CodeVariableReferenceExpression(subVarName), variable.Name)));
            copy.Statements.Add(ifStatement);
            targetClass.Members.Add(copy);

            // GetDebugData()
            CodeMemberMethod getDebugData = new CodeMemberMethod();
            getDebugData.Attributes = MemberAttributes.Public | MemberAttributes.Override;
            getDebugData.Name = "GetDebugData";
            getDebugData.ReturnType = new CodeTypeReference(typeof(string));
            if (container.Log)
                getDebugData.Statements.Add(new CodeMethodReturnStatement(new CodeSnippetExpression($"$\"[{{nameof({container.EventName})}}] sent by [{{Origin}}] : {container.LogString}\"")));
            else
                getDebugData.Statements.Add(new CodeMethodReturnStatement(new CodeSnippetExpression("null")));
            targetClass.Members.Add(getDebugData);

            // Finish
            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
            CodeGeneratorOptions options = new CodeGeneratorOptions();
            options.BracingStyle = "C";

            Directory.CreateDirectory(directory);
            using (StreamWriter writer = new StreamWriter(path))
            {
                writer.Flush();
                provider.GenerateCodeFromCompileUnit(targetUnit, writer, options);
            }

            string result = File.ReadAllText(path);

            // Sucks to do it twice, but removing the semicolon is important, making both cases needed.
            result = result.Replace("{g,ps};", "{ get; private set; }").Replace("{g,ps}", "{ get; private set; }").Replace("@", "");

            if (container.CustomCode)
            {
                if (container.CustomCodeLocation == CustomCodeLocation.InsideClass)
                {
                    int index = result.IndexOf('}', result.LastIndexOf(';')) + 1;
                    if (string.IsNullOrEmpty(customCode))
                        result = result.Insert(index, $"\n\n\t\t{CUSTOM_CODE_START}\n\t\t{CUSTOM_CODE_END}");
                    else
                        result = result.Insert(index, $"\n\n\t\t{CUSTOM_CODE_START}\t\t{customCode}{CUSTOM_CODE_END}");
                }
                else if (container.CustomCodeLocation == CustomCodeLocation.OutsideClass)
                {
                    int index = result.IndexOf('}', result.IndexOf('}', result.LastIndexOf(';')) + 1) + 1;
                    if (string.IsNullOrEmpty(customCode))
                        result = result.Insert(index, $"\n\n\t{CUSTOM_CODE_START}\n\t{CUSTOM_CODE_END}");
                    else
                        result = result.Insert(index, $"\n\n\t{CUSTOM_CODE_START}\n\t{customCode} {CUSTOM_CODE_END}");
                }
            }

            int markerIndex = result.IndexOf(GENERATED_COMMENT_MARKER);
            result = result.Remove(markerIndex, result.IndexOf(GENERATED_COMMENT_MARKER, markerIndex + 1) + GENERATED_COMMENT_MARKER.Length);
            result = result.Insert(0, CUSTOM_COMMENT);

            using (StreamWriter writer = new StreamWriter(path))
            {
                writer.Flush();
                writer.Write(result);
            }

            AssetDatabase.Refresh();
        }

        private void OnEnable()
        {
            _eventListBox = new EventListBox(_eventListBoxState);
            _eventListBox.SetLabel("Events");
            _eventListBox.RegisterOnDelete((container) =>
            {
                DeleteClass(container);
                File.WriteAllText(_scriptPath + "/EventEditorMetadata.json", JsonConvert.SerializeObject(_eventListBox.Data, Formatting.Indented));
            });
            _eventListBox.RegisterSelectedIdsChangedCallback((id) =>
            {
                if (id == null)
                    return;
                _currentSelection = _eventListBox.GetSelectedObject();
            });

            string metadata = null;
            if (!File.Exists(_scriptPath + "/EventEditorMetadata.json"))
                File.Create(_scriptPath + "/EventEditorMetadata.json");
            else
                metadata = File.ReadAllText(_scriptPath + "/EventEditorMetadata.json");

            if (!string.IsNullOrEmpty(metadata))
            {
                List<EventDataContainer> container = JsonConvert.DeserializeObject<List<EventDataContainer>>(metadata);
                if (container != null)
                    _eventListBox.SetData(container);
            }

            _availableTargetTypes = TypeCache.GetTypesDerivedFrom<EventBase>()
                .Where(type => type.IsAbstract && type.ContainsGenericParameters && type.GetGenericArguments().Length == 1)
                .Select(type => type.Name.Replace("`1", "")).ToList();
        }
    }
}